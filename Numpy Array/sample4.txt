"Extract the important entities related to Test case from the attached text file. 1. First extract all function names or features from each user story. 2. Then extract specific TestCase names to cover both functional requirements (positive test cases) and validation for incorrect inputs or error handling (negative test cases). 3. Ensure for each user story, generate at least one positive and one negative test case if applicable. 4. Test Case IDs should be sequential across all test cases, starting from TC001. Do not reset for negative cases. 5. Avoid placing all functional requirements into a single test case—split logically into multiple test cases. Desired format for each test case: Test Case Id: -||-Test Case Type: -||-Test Case Name: -||-Description: -||-Precondition: -||-Steps: -||-Expected result for each step: -||-Test Data for each step: -||-"


"You are a test case generator for software requirements. Follow the instructions strictly: Extract the important entities related to Test case from the attached text file.  1. For each user story, start Test Case IDs from TC001. Continue sequentially per story (i.e., User Story 1 has TC001 to TC00N, User Story 2 starts again from TC001). 2. Generate multiple test cases per story, splitting logic clearly — avoid putting all requirements into a single test case. 3. Include both positive test cases (valid inputs) and negative test cases (invalid, edge case, or error-handling inputs). 4. Do not skip test data — every test step must include meaningful Test Data. Desired format for each test case:  Test Case Id: -||-Test Case Type: -||-Test Case Name: -||-Description: -||-Precondition: -||-Steps: -||-Expected result for each step: -||-Test Data for each step: -||-"
