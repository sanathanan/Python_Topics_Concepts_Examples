import re
import pandas as pd
from testrail_api import TestRailAPI
from testrail_api._exception import StatusCodeError  # Import the exception

def safe_search(pattern, text, group_index=1):
    match = re.search(pattern, text, re.DOTALL)
    return match.group(group_index) if match else ''

# Step 1: Read and parse the .txt file
with open('output/output.txt', 'r', encoding='utf-8') as file:
    content = file.read()

# Split individual test cases using "####"
raw_cases = [tc.strip() for tc in content.split("####") if tc.strip()]

test_cases = []
user_story_code = "US-1234"

for raw in raw_cases:
    test_case = {}

    # Extract fields using regex
    test_case["Title"] = user_story_code
    test_case["Test Case ID"] = safe_search(r"TestCase ID:\s*(\S+)", raw)
    test_case["Test Case Name"] = safe_search(r"TestCase Name:\s*(.*?)\s*Description:", raw)
    test_case["Test Case Type"] = safe_search(r"Test Case Type:\s*(\S+)", raw)
    test_case["Description"] = safe_search(r"Description:\s*(.*?)\s*Precondition:", raw)
    test_case["Precondition"] = safe_search(r"Precondition:\s*(.*?)\s*Test Steps:", raw)
    steps = safe_search(r"Test Steps:\s*(.*?)Expected Results:", raw)
    expected = safe_search(r"Expected Results:\s*(.*?)Test Data:", raw)
    data = safe_search(r"Test Data:\s*(.*)", raw)

    # Clean and join multiline steps, expected results, and data
    test_case["Test Steps"] = ' '.join(line.strip() for line in steps.splitlines() if line.strip())
    test_case["Expected Results"] = ' '.join(line.strip() for line in expected.splitlines() if line.strip())
    test_case["Test Data"] = ', '.join([l.split(':', 1)[-1].strip() for l in data.splitlines() if ':' in l])

    test_cases.append(test_case)

# Step 2: Write to Excel
df = pd.DataFrame(test_cases)
excel_filename = "output/parsed_test_cases.xlsx"
df.to_excel(excel_filename, index=False)
print(f"Excel file created: {excel_filename}")

# Step 3: Retrieve sections to verify section IDs
testrail_url = 'https://yourcompany.testrail.io'
testrail_email = 'your-email@example.com'
testrail_api_key = 'your-api-key'
testrail_project_id = 3  # e.g., project ID where these test cases belong

client = TestRailAPI(testrail_url, testrail_email, testrail_api_key)

sections_response = client.sections.get_sections(testrail_project_id)
sections = sections_response['sections']  # Access the 'sections' key
print("Available sections:")
for section in sections:
    print(f"ID: {section['id']}, Name: {section['name']}")

# Step 4: Create test cases in TestRail
testrail_suite_id = 1  # e.g., suite ID where these test cases belong
testrail_section_id = 22  # Use the correct section ID from the output

for tc in test_cases:
    if not tc['Test Case ID'] or not tc['Test Case Name']:
        print(f"Skipping test case due to missing ID or Name: {tc}")
        continue

    title = str(f"{tc['Test Case ID']} - {tc['Test Case Name']}")
    print(f"Creating test case with title: {title}")  # Debugging: Print the title to verify

    case_data = {
        'title': "Sample Ouput",
        'type_id': 1,  # Adjust based on your TestRail setup
        'priority_id': 2,  # Adjust based on your TestRail setup
        'estimate': '1m',  # Adjust based on your TestRail setup
        'refs': user_story_code,
        'custom_preconds': tc['Precondition'],
        'custom_steps': tc['Test Steps'],
        'custom_expected': tc['Expected Results'],
        'custom_test_data': tc['Test Data'],
        'custom_description': tc['Description']
    }

    try:
        response = client.cases.add_case(testrail_section_id, case_data)
        print(f"Created test case: {response['id']}")
    except StatusCodeError as e:
        print(f"Failed to create test case: {e}")
        print(f"Error message: {e}")


----------------
Error message: (400, 'Bad Request', 'https://sample.testrail.io/index.php?/api/v2/add_case/22', b'{"error":"Field :title is not a valid string."}')      
Creating test case with title: TC009 - Save Billing Document with Incomplete Information
Failed to create test case: (400, 'Bad Request', 'https://sample.testrail.io/index.php?/api/v2/add_case/22', b'{"error":"Field :title is not a valid string."}')
Error message: (400, 'Bad Request', 'https://sample.testrail.io/index.php?/api/v2/add_case/22', b'{"error":"Field :title is not a valid string."}')      
Error message: (400, 'Bad Request', 'https://sample.testrail.io/index.php?/api/v2/add_case/22', b'{"error":"Field :title is not a valid string."}')      
Creating test case with title: TC009 - Save Billing Document with Incomplete Information
Failed to create test case: (400, 'Bad Request', 'https://sample.testrail.io/index.php?/api/v2/add_case/22', b'{"error":"Field :title is not a valid striCreating test case with title: TC009 - Save Billing Document with Incomplete Information
Failed to create test case: (400, 'Bad Request', 'https://sample.testrail.io/index.php?/api/v2/add_case/22', b'{"error":"Field :title is not a valid striFailed to create test case: (400, 'Bad Request', 'https://sample.testrail.io/index.php?/api/v2/add_case/22', b'{"error":"Field :title is not a valid string."}')
Error message: (400, 'Bad Request', 'https://sample.testrail.io/index.php?/api/v2/add_case/22', b'{"error":"Field :title is not a valid string."}')   
