import requests
from requests.auth import HTTPBasicAuth
from io import BytesIO
from docx import Document
import PyPDF2

class ADOConnector:
    def __init__(self, token):
        self.token = token
        self.auth = HTTPBasicAuth('', self.token)

    def get_headers(self, accept="application/json"):
        return {
            "Accept": accept
        }

    def get_work_item(self, full_url):
        # Ensure $expand=relations and api-version=7.0 are appended
        if "?$expand=relations" not in full_url:
            if "?" in full_url:
                full_url += "&$expand=relations"
            else:
                full_url += "?$expand=relations"
        if "api-version" not in full_url:
            full_url += "&api-version=7.0"

        resp = requests.get(full_url, headers=self.get_headers(), auth=self.auth)
        if resp.status_code != 200:
            raise Exception(f"Failed to get work item from URL: {full_url}, status: {resp.status_code}, message: {resp.text}")
        return resp.json()

    def get_description(self, work_item_json):
        return work_item_json.get("fields", {}).get("System.Description", "")

    def get_attachments(self, work_item_json):
        attachments = []
        relations = work_item_json.get("relations", [])
        for rel in relations:
            if rel.get("rel") == "AttachedFile":
                attachments.append(rel.get("url"))
        return attachments

    def download_attachment(self, attachment_url):
        clean_url = attachment_url.split("?")[0]
        resp = requests.get(clean_url, headers=self.get_headers("*/*"), auth=self.auth)
        if resp.status_code != 200:
            raise Exception(f"Failed to download attachment: {attachment_url}, status: {resp.status_code}")
        return resp.content, resp.headers.get("Content-Type", "")

    def extract_text_from_pdf(self, data_bytes):
        reader = PyPDF2.PdfReader(BytesIO(data_bytes))
        return "\n".join(page.extract_text() or "" for page in reader.pages)

    def extract_text_from_docx(self, data_bytes):
        doc = Document(BytesIO(data_bytes))
        return "\n".join(para.text for para in doc.paragraphs)

    def extract_text_from_attachment(self, data, content_type, url=""):
        if "pdf" in content_type.lower() or url.endswith(".pdf"):
            return self.extract_text_from_pdf(data)
        elif "word" in content_type.lower() or url.endswith(".docx"):
            return self.extract_text_from_docx(data)
        elif "text" in content_type.lower() or url.endswith(".txt"):
            return data.decode(errors="ignore")
        else:
            return f"[Unsupported file type: {content_type}]"

    def get_document_content(self, full_url):
        work_item = self.get_work_item(full_url)

        # 1. Check Description
        description = self.get_description(work_item)
        if description:
            return description

        # 2. Fallback to attachment text
        attachments = self.get_attachments(work_item)
        all_texts = []
        for att_url in attachments:
            try:
                data, content_type = self.download_attachment(att_url)
                text = self.extract_text_from_attachment(data, content_type, att_url)
                all_texts.append(text)
            except Exception as e:
                all_texts.append(f"[Error extracting from {att_url}: {e}]")

        return "\n\n".join(all_texts) if all_texts else "No content found in work item description or attachments."
