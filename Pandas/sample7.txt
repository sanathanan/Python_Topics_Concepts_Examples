import requests
from requests.auth import HTTPBasicAuth
import mimetypes
from io import BytesIO
from docx import Document
import PyPDF2

class ADOConnector:
    def __init__(self, org, project, token):
        self.org = org
        self.project = project
        self.token = token
        self.base_url = f"https://dev.azure.com/{self.org}/{self.project}/_apis/wit/workitems/"
        self.auth = HTTPBasicAuth('', self.token)
        self.api_version = "7.0"

    def get_headers(self):
        return {
            "Accept": "application/json"
        }

    def get_work_item(self, wid_or_url):
        if wid_or_url.startswith("http"):
            url = wid_or_url
        else:
            url = f"{self.base_url}{wid_or_url}?$expand=relations&api-version={self.api_version}"

        resp = requests.get(url, headers=self.get_headers(), auth=self.auth)
        if resp.status_code != 200:
            raise Exception(f"Failed to get work item {wid_or_url}, status: {resp.status_code}, message: {resp.text}")
        return resp.json()

    def get_attachment_content(self, attachment_url):
        # The attachment_url might be something like:
        # https://dev.azure.com/{org}/_apis/wit/attachments/{attachmentId}?api-version=7.0
        # We want to strip the ?api-version=7.0 before fetching raw content

        clean_url = attachment_url.split("?")[0]

        headers = {"Accept": "*/*"}  # Accept any content type
        resp = requests.get(clean_url, headers=headers, auth=self.auth)
        if resp.status_code != 200:
            raise Exception(f"Failed to download attachment from {clean_url}, status: {resp.status_code}")

        content_type = resp.headers.get("Content-Type", "application/octet-stream")
        data = resp.content

        # Handle based on mime type
        if "pdf" in content_type.lower():
            return self._extract_text_from_pdf(data)
        elif "word" in content_type.lower() or clean_url.endswith(".docx"):
            return self._extract_text_from_docx(data)
        elif "text" in content_type.lower() or clean_url.endswith(".txt"):
            return data.decode(errors='ignore')
        else:
            # Unsupported attachment type
            return f"[Unsupported attachment type: {content_type}]"

    def _extract_text_from_pdf(self, data_bytes):
        pdf_reader = PyPDF2.PdfReader(BytesIO(data_bytes))
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text() or ""
        return text

    def _extract_text_from_docx(self, data_bytes):
        doc = Document(BytesIO(data_bytes))
        fullText = []
        for para in doc.paragraphs:
            fullText.append(para.text)
        return "\n".join(fullText)

    def get_work_item_description(self, work_item_json):
        # Description field key varies by process template. Commonly "System.Description"
        fields = work_item_json.get("fields", {})
        description = fields.get("System.Description", "")
        if description:
            return description
        return ""

    def get_related_work_items(self, work_item_json):
        # Returns list of related work item IDs from relations
        relations = work_item_json.get("relations", [])
        related_ids = []
        for rel in relations:
            url = rel.get("url", "")
            # url format: https://dev.azure.com/{org}/{project}/_apis/wit/workItems/{id}
            if url:
                wid = url.rstrip("/").split("/")[-1]
                if wid.isdigit():
                    related_ids.append(wid)
        return related_ids

    def get_document_content(self, wid_or_url):
        # 1. Get the main work item json
        work_item = self.get_work_item(wid_or_url)

        # 2. Try to get description content
        description = self.get_work_item_description(work_item)
        if description:
            return description

        # 3. If description empty, check attachments on this item and related items (parent/child)
        # Get attachments from relations
        attachment_texts = []

        def collect_attachments_from_work_item(wi_json):
            attachments = []
            for rel in wi_json.get("relations", []):
                if rel.get("rel") == "AttachedFile":
                    attachments.append(rel.get("url"))
            return attachments

        # Collect attachments on main item
        attachments = collect_attachments_from_work_item(work_item)

        # Collect attachments on related items (child/parent)
        related_ids = self.get_related_work_items(work_item)
        for rid in related_ids:
            try:
                related_wi = self.get_work_item(rid)
                attachments += collect_attachments_from_work_item(related_wi)
            except Exception as e:
                # skip if error
                pass

        # Download and extract text from attachments
        for att_url in attachments:
            try:
                text = self.get_attachment_content(att_url)
                if text:
                    attachment_texts.append(text)
            except Exception as e:
                # ignore errors
                attachment_texts.append(f"[Error reading attachment: {e}]")

        if attachment_texts:
            return "\n\n".join(attachment_texts)

        return "No content found in ADO work item or its hierarchy."
