import re
import pandas as pd
from testrail_api import APIClient

def safe_search(pattern, text, group_index=1):
    match = re.search(pattern, text, re.DOTALL)
    if match:
        try:
            return match.group(group_index)
        except IndexError:
            return ''
    return ''

# Step 1: Read and parse the .txt file
with open('output/output.txt', 'r', encoding='utf-8') as file:
    content = file.read()

# Split individual test cases using "####"
raw_cases = [tc.strip() for tc in content.split("####") if tc.strip()]
test_cases = []
user_story_code = "US-1234"  # Replace with actual story code

for raw in raw_cases:
    try:
        test_case = {}

        # Extract fields using regex
        test_case["Title"] = user_story_code
        test_case["Test Case ID"] = safe_search(r"TestCase ID:\s*(\S+)", raw)
        test_case["Test Case Name"] = safe_search(r"TestCase Name:\s*(.*?)\s*Description:", raw)
        test_case["Test Case Type"] = safe_search(r"Test Case Type:\s*(\S+)", raw)
        test_case["Description"] = safe_search(r"Description:\s*(.*?)\s*Precondition:", raw)
        test_case["Precondition"] = safe_search(r"Precondition:\s*(.*?)\s*Test Steps:", raw)
        steps = safe_search(r"Test Steps:\s*(.*?)Expected Results:", raw)
        expected = safe_search(r"Expected Results:\s*(.*?)Test Data:", raw)
        data = safe_search(r"Test Data:\s*(.*)", raw)

        # Clean and join multiline fields
        test_case["Test Steps"] = ' '.join(line.strip() for line in steps.splitlines() if line.strip())
        test_case["Expected Results"] = ' '.join(line.strip() for line in expected.splitlines() if line.strip())
        test_case["Test Data"] = ', '.join([l.split(':', 1)[-1].strip() for l in data.splitlines() if ':' in l])

        test_cases.append(test_case)
    except AttributeError as e:
        print(f"Error parsing test case:\n{raw}\nError: {e}")

# Step 2: Write to Excel
df = pd.DataFrame(test_cases)
excel_filename = "output/testrail_parsed_test_cases.xlsx"
df.to_excel(excel_filename, index=False)
print(f"Excel file created: {excel_filename}")

# Step 3: Create test cases in TestRail
# Replace these values
testrail_url = 'https://yourcompany.testrail.io'
testrail_email = 'your-email@example.com'
testrail_api_key = 'your-api-key'
project_id = 3  # Replace with actual project ID
suite_id = 3    # Replace with actual suite ID
section_id = 22  # Replace with actual section ID

api = APIClient(testrail_url)

for tc in test_cases:
    title = f"{tc['Test Case ID']} - {tc['Test Case Name']}"
    print("Title:", title)
    steps = f"{tc['Test Steps']}\n\nExpected:\n{tc['Expected Results']}\n\nTest Data:\n{tc['Test Data']}"
    
    case_data = {
        "title": title,
        "custom_description": tc["Description"],
        "custom_preconds": tc["Precondition"],
        "custom_expected": tc["Expected Results"],
        "custom_test_data": tc["Test Data"]
    }

    api.cases.add_case(section_id, case_data)

    # api.cases.add_case(section_id, 
    #                    title,
    #                    json={
    #                         'template_id': 1,  # Optional; depends on your TestRail config
    #                         'type_id': 1,      # Optional; maps to test case type
    #                         'priority_id': 2,  # Optional
    #                         'custom_preconds': tc['Precondition'] or 'No Preconditions Specified.',
    #                         'custom_steps_separated': [{'content': steps, 'expected': tc['Expected Results']}],
    #                         'custom_description': tc['Description']
    #                     })
    print(f"Created TestRail case: {title}") 
