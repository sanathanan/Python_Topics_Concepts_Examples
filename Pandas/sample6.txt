import re
import pandas as pd
from testrail_api import TestRailAPI
import json
import requests


def safe_search(pattern, text, group_index=1):
    match = re.search(pattern, text, re.DOTALL)
    if match:
        try: 
            return match.group(group_index)
        except IndexError:
            return ''
    return ''
		

# Step 1: Read and parse the .txt file
with open('output/output.txt', 'r', encoding='utf-8') as file:
    content = file.read()

# Split individual test cases using "####"
raw_cases = [tc.strip() for tc in content.split("####") if tc.strip()]
test_cases = []
user_story_code = "US-1234"

for raw in raw_cases:
    test_case = {}

    # Extract fields using regex
    test_case["Title"] = user_story_code
    test_case["Test Case ID"] = safe_search(r"Test Case Id:\s*(\S+)", raw)
    test_case["Test Case Name"] = safe_search(r"Test Case Name:\s*(.*?)\s*Description:", raw)
    test_case["Test Case Type"] = safe_search(r"Test Case Type:\s*(\S+)", raw)
    test_case["Description"] = safe_search(r"Description:\s*(.*?)\s*Precondition:", raw)
    test_case["Precondition"] = safe_search(r"Precondition:\s*(.*?)\s*Test Steps:", raw)
    steps = safe_search(r"Test Steps:\s*(.*?)Expected Results:", raw)
    expected = safe_search(r"Expected Results:\s*(.*?)Test Data:", raw)
    data = safe_search(r"Test Data:\s*(.*)", raw)

    # Clean and join multiline steps, expected results, and data
    test_case["Test Steps"] = ' '.join(line.strip() for line in steps.splitlines() if line.strip())
    test_case["Expected Results"] = ' '.join(line.strip() for line in expected.splitlines() if line.strip())
    test_case["Test Data"] = ', '.join([l.split(':', 1)[-1].strip() for l in data.splitlines() if ':' in l])

    test_cases.append(test_case)

# Step 2: Write to Excel
df = pd.DataFrame(test_cases)
excel_filename = "output/parsed_test_cases.xlsx"
df.to_excel(excel_filename, index=False)
print(f"Excel file created: {excel_filename}")

# Step 3: Retrieve sections to verify section IDs
testrail_url = 'url'
testrail_email = 'email'
testrail_api_key = 'token'
testrail_project_id = 3  # e.g., project ID where these test cases belong
testrail_suite_id = 1  # e.g., suite ID where these test cases belong
testrail_section_id = 22  # Use the correct section ID from the output

api = TestRailAPI(testrail_url, testrail_email, testrail_api_key)

for tc in test_cases:
    title = f"{tc['Test Case ID']} - {tc['Test Case Name']}"
    print(f"Final title string: '{title}'")

    payload = {
        'title': title.strip(),
        'custom_description': tc['Description'],
        'custom_preconds': tc['Precondition'],
        'custom_expected': tc['Expected Results'],
        'custom_steps': tc['Test Steps'],
        'custom_test_data': tc['Test Data']
    }
    print("Sending payload:", payload)

    url = f"{testrail_url}/index.php?/api/v2/add_case/{testrail_section_id}"
    headers = {"Content-Type": "application/json"}
    auth = (testrail_email, testrail_api_key)

    response = requests.post(url, headers=headers, auth=auth, json=payload)

    if response.status_code == 200:
        data = response.json()
        print(f"Created test case: {data['id']}")
    else:
        print(f"Failed to cerate test case: {response.status_code} - {response.text}")
 
 
