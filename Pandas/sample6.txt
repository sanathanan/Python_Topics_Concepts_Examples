import requests
import base64
import os
from urllib.parse import urlparse

class ADOConnector:
    def __init__(self, key, org_url, project_name, token):
        self.key = key
        self.org_url = org_url.rstrip('/')
        self.project_name = project_name
        self.token = token
        self.api_version = "7.0"

    def get_document_content(self, work_item_url):
        visited = set()
        text_parts = []
        self._fetch_work_item_recursive(work_item_url, visited, text_parts)
        return "\n".join(text_parts) if text_parts else "No content found in ADO work item or its hierarchy"

    def _fetch_work_item_recursive(self, work_item_url, visited, text_parts):
        work_item_id = self._extract_work_item_id(work_item_url)
        if work_item_id in visited:
            return
        visited.add(work_item_id)

        headers = {"Content-Type": "application/json"}
        response = requests.get(work_item_url, headers=headers, auth=("", self.token))

        print(f"\n[DEBUG] Requested: {work_item_url}")
        print(f"[DEBUG] Status Code: {response.status_code}")
        if response.status_code != 200:
            print(f"[ERROR] Failed to retrieve work item {work_item_id}")
            return

        work_item = response.json()
        fields = work_item.get("fields", {})
        content = fields.get("System.Description", "")
        title = fields.get("System.Title", "")
        if title:
            text_parts.append(f"Title: {title}")
        if content:
            text_parts.append(f"Description: {content}")

        relations = work_item.get("relations", [])
        for relation in relations:
            rel_url = relation.get("url", "")
            rel_type = relation.get("rel", "")
            if rel_type in ["System.LinkTypes.Hierarchy-Forward", "System.LinkTypes.Hierarchy-Reverse"]:
                self._fetch_work_item_recursive(rel_url + f"?$expand=relations&api-version={self.api_version}", visited, text_parts)
            elif rel_type == "AttachedFile":
                attachment_text = self._download_attachment(rel_url)
                if attachment_text:
                    text_parts.append(f"\n[Attachment Text]\n{attachment_text}")

    def _download_attachment(self, attachment_url):
        print(f"[INFO] Downloading attachment: {attachment_url}")
        response = requests.get(attachment_url, auth=("", self.token))
        if response.status_code != 200:
            print(f"[ERROR] Failed to download attachment: {attachment_url}")
            return ""

        content_type = response.headers.get("Content-Type", "")
        print(f"[DEBUG] Detected Content-Type: {content_type}")

        if "text" in content_type or "json" in content_type:
            return response.text
        elif "octet-stream" in content_type:
            try:
                return response.content.decode("utf-8", errors="ignore")
            except:
                return "[Binary data: could not decode]"
        else:
            return "[Unsupported attachment file type]"

    def _extract_work_item_id(self, url):
        parsed = urlparse(url)
        path_parts = parsed.path.split('/')
        for i, part in enumerate(path_parts):
            if part.lower() == "workitems" and i + 1 < len(path_parts):
                return path_parts[i + 1].split('?')[0]
        return ""
